<!DOCTYPE html>
<html lang="es">
  <head>
    <%- include("../partials/head", {title: 'Detalle de producto'}) %>

    <link rel="stylesheet" href="/css/productDetail.css" />
    
    <% if(locals.userLogged){ %> <!-- por que no funcionaba si usaba solo userLogged -->

      <script id="addToCartScript" src="/scripts/addToCart.js"  data-product="<%- encodeURIComponent(JSON.stringify(product)) %>" data-user="<%- encodeURIComponent(JSON.stringify(userLogged.id)) %>"></script>
    <% } %>
  </head>
  <body>
    <%- include('../partials/header') %> 

    <main>
      <div class="nav">
        <a href="/">Home</a>
        <span>/</span>
        <a href="/products">Productos</a>
        <span>/</span>
        <a href="#"><%= product.shortName %></a>
      </div>
      <section class="product">
        <div class="card">
          <div>
            <img src="/img/products/<%= product.image %>" alt="producto" />
          </div>
          <% if (locals.isLogged && locals.userLogged.admin !== null) { %>
          <div class="buttons">
            <a href="/products/edit/<%= product.id %>"
              ><button class="edit">Editar producto</button></a
            >
            <form
              action="/products/<%= product.id %>?_method=delete"
              method="post"
            >
              <button type="submit" class="delete">Eliminar producto</button>
            </form>
          </div>
          <% } %>
        </div>
        <div class="data">
          <div class="details">
            <h2 class="name"><%= product.name %></h2>
            <div class="prices">
              <% if (product.discount > 0) { %>
              <h5>
                <span class="notPrice">$ <%= product.price %></span> / <span><%= product.discount %>% OFF</span>
              </h5>
              <h2>$ <%= product.priceWithDiscount %></h2> 
              <% } else { %>
              <h2>$ <%= product.price %></h2>
              <% } %>
            </div>
            <form action="">
              <div class="amount">
                <% if (product.stock == 0) { %>
                <p>No hay stock</p>
                <% } else { %>
                <h4>Cantidad:</h4>
                <div class="stockContainer">
                    <button class="stockButton" id="subtract">-</button>
                    <input type="number" id="quantity" value="1" min="1">
                    <button class="stockButton" id="add">+</button>
                </div>
                <% } %>
              </div>
            </form>
            <button type="button" id="addToCart" class="cart">Agregar al carrito<i class="fa-solid fa-cart-shopping"></i></button>
          </div>
          <div class="desc">
            <h3>Descripcion</h3>
            <p><%= product.description %></p>
          </div>
        </div>
      </section>
      <section class="relatedProducts">
        <h3 class="titleRelatedProducts">Productos relacionados</h3>
        <div class="wrapper">
          <i id="left" class="fa-solid fa-angle-left"></i>
        <ul class="carousel">     
          <% relatedProducts.forEach(product => { %>
            <li class="card"><%-
            include("../partials/productCard", {product}) %>
            </li> <% }); %>
          </ul>
        <i id="right" class="fa-solid fa-angle-right"></i>  
        </div>
      </section>
    </main>
    <script>

      const wrapper = document.querySelector(".wrapper");
      const carousel = document.querySelector(".carousel");
      const firstCardWidth = carousel.querySelector(".card").offsetWidth;
      const arrowBtns = document.querySelectorAll(".wrapper i");
      const carouselChildrens = [...carousel.children];
      
      let isDragging = false, isAutoPlay = true, startX, startScrollLeft, timeoutId;
      
      // Get the number of cards that can fit in the carousel at once
      let cardPerView = Math.round(carousel.offsetWidth / firstCardWidth);
      
      // Insert copies of the last few cards to beginning of carousel for infinite scrolling
      carouselChildrens.slice(-cardPerView).reverse().forEach(card => {
          carousel.insertAdjacentHTML("afterbegin", card.outerHTML);
      });
      
      // Insert copies of the first few cards to end of carousel for infinite scrolling
      carouselChildrens.slice(0, cardPerView).forEach(card => {
          carousel.insertAdjacentHTML("beforeend", card.outerHTML);
      });
      
      // Scroll the carousel at appropriate postition to hide first few duplicate cards on Firefox
      carousel.classList.add("no-transition");
      carousel.scrollLeft = carousel.offsetWidth;
      carousel.classList.remove("no-transition");
      
      // Add event listeners for the arrow buttons to scroll the carousel left and right
      arrowBtns.forEach(btn => {
          btn.addEventListener("click", () => {
              carousel.scrollLeft += btn.id == "left" ? -firstCardWidth : firstCardWidth;
          });
      });
      
      const dragStart = (e) => {
          isDragging = true;
          carousel.classList.add("dragging");
          // Records the initial cursor and scroll position of the carousel
          startX = e.pageX;
          startScrollLeft = carousel.scrollLeft;
      }
      
      const dragging = (e) => {
          if(!isDragging) return; // if isDragging is false return from here
          // Updates the scroll position of the carousel based on the cursor movement
          carousel.scrollLeft = startScrollLeft - (e.pageX - startX);
      }
      
      const dragStop = () => {
          isDragging = false;
          carousel.classList.remove("dragging");
      }
      
      const infiniteScroll = () => {
          // If the carousel is at the beginning, scroll to the end
          if(carousel.scrollLeft === 0) {
              carousel.classList.add("no-transition");
              carousel.scrollLeft = carousel.scrollWidth - (2 * carousel.offsetWidth);
              carousel.classList.remove("no-transition");
          }
          // If the carousel is at the end, scroll to the beginning
          else if(Math.ceil(carousel.scrollLeft) === carousel.scrollWidth - carousel.offsetWidth) {
              carousel.classList.add("no-transition");
              carousel.scrollLeft = carousel.offsetWidth;
              carousel.classList.remove("no-transition");
          }
      
          // Clear existing timeout & start autoplay if mouse is not hovering over carousel
          clearTimeout(timeoutId);
          if(!wrapper.matches(":hover")) autoPlay();
      }
      
      const autoPlay = () => {
          if(window.innerWidth < 800 || !isAutoPlay) return; // Return if window is smaller than 800 or isAutoPlay is false
          // Autoplay the carousel after every 2500 ms
          timeoutId = setTimeout(() => carousel.scrollLeft += firstCardWidth, 2500);
      }
      autoPlay();
      
      carousel.addEventListener("mousedown", dragStart);
      carousel.addEventListener("mousemove", dragging);
      document.addEventListener("mouseup", dragStop);
      carousel.addEventListener("scroll", infiniteScroll);
      wrapper.addEventListener("mouseenter", () => clearTimeout(timeoutId));
      wrapper.addEventListener("mouseleave", autoPlay);
      
        </script>
      

    <%- include("../partials/footer") %>
  </body>
</html>
